<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- 本工程项目主要是定义 POM 文件，将后续各个子模块公用的 jar 包统一抽取出来，类似一个抽象父类。-->
    <groupId>com.hyman</groupId>
    <artifactId>SpringCloudAlibabaDemo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <!-- 公共的 jar 包都抽取到父类工程 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.11.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <junit.version>4.12</junit.version>

        <log4j.version>1.2.17</log4j.version>
        <mysql.version>8.0.15</mysql.version>
        <durid.version>1.1.20</durid.version>
        <mybatis.version>1.3.2</mybatis.version>
        <java.version>1.8</java.version>
        <logback.version>1.2.3</logback.version>
        <fastjson.version>1.2.79</fastjson.version>

        <spring.boot.admin.version>2.0.2</spring.boot.admin.version>
        <aliyun.oss.version>2.8.3</aliyun.oss.version>
        <commons.lang3.version>3.9</commons.lang3.version>
        <tomcat.version>8.5.30</tomcat.version>
        <elasticsearch.version>6.6.2</elasticsearch.version>

        <openFeign.version>3.2.2</openFeign.version>
        <skywalking.version>6.6.0</skywalking.version>
        <easyexcel.version>2.2.6</easyexcel.version>
        <poi.version>3.17</poi.version>
        <lombok.version>1.18.6</lombok.version>

        <docker.image.prefix>ag</docker.image.prefix>
        <docker.plugin.version>0.4.13</docker.plugin.version>

        <!-- 新增 -->
        <ons-client.version>1.8.7.4.Final</ons-client.version>
        <guava.version>30.1.1-jre</guava.version>
        <protostuff-runtime.version>1.7.2</protostuff-runtime.version>
        <protostuff-core.version>1.7.2</protostuff-core.version>
        <maven-javadoc-plugin.version>3.2.0</maven-javadoc-plugin.version>
        <maven-gpg-plugin.version>1.6</maven-gpg-plugin.version>
    </properties>

    <modules>
        <module>cloud-api</module>
        <module>cloud-common</module>
        <module>cloud-provider-8001</module>
        <module>cloud-provider-8002</module>
        <module>consumer-dept-80</module>
        <module>cloud-gateway-9527</module>
        <module>cloud-nacos-config</module>
        <module>cloud-seata-order</module>

        <module>single-nacos-sentinel</module>
    </modules>

    <!-- 指定 maven 仓库，是对 setting 文件的补充 -->
    <repositories>
        <repository>
            <id>central</id>
            <name>aliyun-repos</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <layout>default</layout>
            <!-- 是否开启发布版构件下载 -->
            <releases>
                <enabled>true</enabled>
            </releases>
            <!-- 是否开启快照版构件下载 -->
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>spring-milestones</id>
            <url>https://repo.spring.io/libs-milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <!-- Dependencies 相对于 dependencyManagement，所有在这个元素里的依赖都会自动引入，并默认被所有的子项目继承。-->
    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.6</version>
            <scope>provided</scope>
        </dependency>

        <!--自定义配置实现自动提示-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <!--
     由于我们的模块很多，所以就需要再抽象一层，抽出一个 parent 来管理子项目的公共的依赖。为了项目的正确运行，必须让所有的子项
     目使用依赖项的统一版本，必须确保应用的各个项目的依赖项和版本一致，才能保证测试的和发布的是相同的结果。

     在我们项目顶层的POM文件中，我们会看到 dependencyManagement 元素。通过它来管理jar包的版本，让子项目中引用一个依赖而不用显
     示的列出版本号。Maven会沿着父子层次向上走，直到找到一个拥有 dependencyManagement 元素的项目，然后它就会使用在这个元素中
     指定的版本号。

     区别：
     dependencies 即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）。
     dependencyManagement 里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不
     会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且 version 和 scope
     都读取自父 pom。另外如果子项目中指定了版本号，那么会使用子项目中指定的 jar 版本。
    -->
    <!-- 手动添加 -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Hoxton.SR1</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--
            SpringCloud 与 其他开源框架版本号的区别是:
            通常都是通过数字来区分版本号的，而 SpringCloud 是根据英文字母的顺序，采用伦敦的"地名+版本号"的方式来命名的。

            例如:Angel SR6,Brixton SR7,Camden SR7,Dalston SR3。
            其中Angel， Brixton，Camden，Dalston是地名，SR是Service Releases的编写。后面的数字是版本号。
            -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>2.1.1.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.2.2.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${durid.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${durid.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- 不会自动生成，在 IDEA 中创建微服务不需要这个，在 Eclipce 中可能需要 -->
    <!--<modules>-->
        <!--<module>cloud-api</module>-->
    <!--</modules>-->


    <!-- 构建特殊配置信息，因为在构建Maven项目的时候，如果没有进行特殊的配置，Maven会按照标准的目录结构查找和处理各种类型文件。 -->
    <build>
        <finalName>SpringCloudAlibabaDemo</finalName>
        <!-- 通过 resource 标签来指定加载配置文件，也可以指定访问的资源的路径 -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <!-- 该属性用来表示资源文件中的占位符是否需要被替换，true为需要替换（例如替换 ${xxx}）-->
                <filtering>true</filtering>
                <!-- 排除掉特定的文件（例如 init.json 文件）-->
                <excludes>
                    <exclude>**/*.json</exclude>
                </excludes>
            </resource>
        </resources>

        <!-- 下面插件是用来让 maven 项目可以访问到资源，并且可以自定义规则去访问。否则按照 maven 默认的来访问资源。-->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <!-- 自定义访问资源的规则为，只访问到以 $ 符号开头或结尾的数据 -->
                <configuration>
                    <delimiters>
                        <delimit>@</delimit>
                    </delimiters>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!-- 热部署插件设置，如果没有该配置，则热部署的devtools不生效 -->
                <configuration>
                    <fork>true</fork>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>