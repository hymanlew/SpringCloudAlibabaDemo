server:
  port: 80

spring:
  application:
    name: microservice-consumer-dept

  cloud:
    nacos:
      discovery:
        # nginx 负载服务器 ip:统一访问端口（配置参考 springcloud md 文档）
        server-addr: 192.168.1.1:3333

    # 给消费者配置上限流熔断策略
    sentinel:
      transport:
        # sentinel dashboard 单机服务器，单独从官网下载解压并运行，默认端口就是 8080
        dashboard: localhost:8080
        # 默认 8719 端口，若被占用会自动从 8719 依次加 1 扫描，直到找到未占用的端口
        port: 8719

      # 目前 sentinel 规则持久化支持 Consul，zookeeper，redis，nacos，apollo，etcd 等数据源的扩展。用什么类型的数据源配相应的 key 即可
      datasource:
        - nacos:
            server-addr: 192.168.1.1:3333
            # 区分不同应用的配置
            data-id: {spring.application.name}-sentinel
            group_id: DEFAULT_GROUP
            # 指定配置项的内容格式，sentinel 提供了 json，xml 两种格式。如需自定义，可将值配置为 custom，并配置 converter-class 指向 converter 类
            data-type: json
            # 表示数据源中的规则是哪种类型，有 flow，degrade，param-flow，gw-flow 等
            rule-type: flow

# 然后在 nacos 的控制台中添加 json 格式对应文件的配置即可，之后接口流控规则的动态修改就存在于两个地方：sentinel dashboard 和 nacos 控制台。
#[
#    {
#        "resource": "/getbyid", //资源名称
#        "limitApp": "default", //需要限流的应用
#        "grade": 1,	//阈值类型，0线程数，1QPS
#        "count": 1,	//单机阈值
#        "strategy": 0,	//流控模式，0直接，1关联，2链路
#        "controlBehavior": 0, //流控效果，0快速失败，1warmup，2排除等待
#        "clusterMode": false	//是否集群
#    }
#]

# 启用 openfeign 熔断机制，设置响应超时时间（sentinel 默认的超时时间是 2秒），并自动调用 api 中的 fallback 进行信息返回.
# 开启 feign 对 sentinel 的支持，且默认没有开启重试机制
feign:
  sentinel:
    enabled: true
  httpclient:
    connection-timeout: 3000
  client:
    config:
      # 此处的 feignName 为远端服务的服务名。因为 Spring Cloud 有自己的服务发现，通过服务名就能定位到该服务的可用实例列表，
      # 再通过负载均衡策略选取其中一个实例，最后向该服务实例发起请求。
      # 此配置是针对某个服务的，而其他服务的配置可能基本都一样，这时只需将 feignName 替换成 default 即可全局自定义配置。
      #feignName:
      default:
        connectTimeout: 3000
        readTimeout: 3000
        loggerLevel: info
        #retryer: com.example.SimpleRetryer

  # feign 对 request or response 的 GZIP 压缩
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

# 如果是要打印 feign 的日志，则最低是 debug 级别，并且必须要配置在 FeignClient 服务端，且在 FeignClient 指定的配置类中声明了
# 日志输出，否则不会输出日志。
# 可以对每个 feignClient 进行配置。
logging:
  level:
    root: info
    org.hibernate: info
    org.hibernate.type.descriptor.sql.BasicBinder: trace
    org.hibernate.type.descriptor.sql.BasicExtractor: trace

    # 如果需要对提供者中的类打印日志，则必须在该类指定的 FeignClient 指定的配置类中声明了日志输出 bean，否则不会打印日志
    com.hyman.consumerdept80.controller.DeptController: debug

