<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.hyman</groupId>
		<artifactId>SpringCloudAlibabaDemo</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>

	<artifactId>single-nacos-sentinel</artifactId>
	<name>single-nacos-config</name>
	<description>单机服务注册流控中心</description>

	<dependencies>
		<!-- 单机单独应用注册中心的配置 -->
		<dependency>
			<groupId>com.alibaba.boot</groupId>
			<artifactId>nacos-discovery-spring-boot-starter</artifactId>
			<version>0.2.4</version>
		</dependency>
		<!-- 单机单独应用配置中心的配置 -->
		<dependency>
			<groupId>com.alibaba.boot</groupId>
			<artifactId>nacos-config-spring-boot-starter</artifactId>
			<version>0.2.4</version>
		</dependency>

		<!-- 单机单独应用熔断限流的配置 -->
		<dependency>
			<groupId>com.alibaba.csp</groupId>
			<artifactId>sentinel-core</artifactId>
			<version>1.7.1</version>
		</dependency>
		<!-- 热点参数限流相关依赖 -->
		<dependency>
			<groupId>com.alibaba.csp</groupId>
			<artifactId>sentinel-parameter-flow-control</artifactId>
			<version>1.7.1</version>
		</dependency>
		<!-- 客户端需要引入 Transport 模块来与 Sentinel 控制台进行通信 -->
		<!-- sentinel dashboard 集成 dubbo 的 jar，可对服务提供方和调用消费方都进行流控，并上报相关信息到控制台 -->
		<dependency>
			<groupId>com.alibaba.csp</groupId>
			<artifactId>sentinel-transport-simple-http</artifactId>
			<version>1.7.1</version>
		</dependency>
		<!-- 重要的依赖，不可缺少 -->
		<dependency>
			<groupId>com.alibaba.csp</groupId>
			<artifactId>sentinel-web-servlet</artifactId>
			<version>1.8.1</version>
		</dependency>

		<!-- 多应用分布式事务的配置（每个单机应用都进行引入即可）-->
		<dependency>
			<groupId>io.seata</groupId>
			<artifactId>seata-spring-boot-starter</artifactId>
			<version>1.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis-reactive</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- 动态编译代码 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<!-- optional=true，依赖不会往下传递，如果有项目依赖本项目，并且想要使用devtools，需要重新引入 -->
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-commons</artifactId>
		</dependency>
	</dependencies>

	<!--
	下面这个插件是用来运行 Springboot的，通常有两种方式可以运行 SpringBoot：
	一种是通过直接运行main方法。
	另外一种是通过使用下面的插件运行。

	两种方式是有差别的，一旦项目中需要访问资源的时候就需要通过插件运行，否则无法访问到资源。
	即这个插件可以把项目打包成可执行的 jar 包。
	-->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
